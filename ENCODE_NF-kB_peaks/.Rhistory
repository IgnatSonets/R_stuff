GM18951_peaks, GM19099_peaks, A549_peaks,
HUVEC_peaks, IMR90_peaks, SGBS_peaks,
Beas_peaks, AC16_peaks)
ggplot(all_peaks, aes(fold_change, ..count.., fill = Chromosome))+
geom_density(aes(fill=Chromosome), alpha = 0.5) +
labs(title = "Fold change peak distribution",
x = "Fold change",
y = "Peak number")+
theme_bw()+
facet_wrap(~ Cell_line)
ggplot(all_peaks, aes(Cell_line, Stop-Start))+
geom_boxplot()+
labs(title = "Peak length distribution",
x = "Cell line",
y = "Peak length")+
theme_bw()
all_peaks <- bin.peaks(all_peaks, window_size = 50)
#Выделим для каждого бина отдельную строку, чтобы было удобнее. Для этого возьмем функцию unnest из пакетика tidyr
all_bins <- unnest(all_peaks, Peak_Bins)
all_bins <- as.data.table(all_bins)
#Немного говнокода, но мы переживем, зато не надо ничего руками делать
all_intersect <- Reduce(intersect, all_bins[, .(list(unique(Peak_Bins))), Cell_line]$V1)
common_bins <- all_bins[all_bins$Peak_Bins %in% all_intersect, ]
ggplot(common_bins, aes(Chromosome, fill = Chromosome))+
geom_histogram(aes(fill=Chromosome), alpha = 0.5, stat = "count") +
labs(title = "Common bin location distribution",
x = "Genome location",
y = "Peak number")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.background = element_rect(fill = "white",
colour = NA), panel.border = element_rect(fill = NA,
colour = "grey20"), panel.grid.major = element_line(colour = "grey92"),
panel.grid.minor = element_line(colour = "grey92",
size = 0.25), strip.background = element_rect(fill = "grey85",
colour = "grey20"), legend.key = element_rect(fill = "white",
colour = NA), complete = TRUE)
#Теперь переведем бины обратно в пики
common_peaks <- aggregate(common_bins$Peak_Bins,
by = list(common_bins$Peak_name, common_bins$Cell_line),
FUN = min)
names(common_peaks) <- c("Peak_name", "Cell_line", "Start")
common_peaks$Stop <- aggregate(common_bins$Peak_Bins,
by = list(common_bins$Peak_name,common_bins$Cell_line),
FUN = function(x) max(x)+50)[,3]
common_peaks$Chromosome <- aggregate(common_bins$Chromosome,
by = list(common_bins$Peak_name),
FUN = function(x) x[1])[,2]
common_peaks$Fold_change <- aggregate(common_bins$fold_change,
by = list(common_bins$Peak_name),
FUN = function(x) x[1])[,2]
common_peaks$'p-value' <- aggregate(common_bins$`p-value`,
by = list(common_bins$Peak_name),
FUN = function(x) x[1])[,2]
common_peaks$'q-value' <- aggregate(common_bins$`q-value`,
by = list(common_bins$Peak_name),
FUN = function(x) x[1])[,2]
#Переставим в правильном порядке столбцы, чтобы bedtools съел
common_peaks <- common_peaks[,c("Chromosome", "Start", "Stop", "Peak_name",
"Fold_change", "p-value", "q-value", "Cell_line")]
# Проверим, нет ли косяков в .bed файле и запишем в файл
stopifnot(sum(common_peaks$Start > common_peaks$Stop) == 0)
fwrite(common_peaks, "peaks.bed", sep = "\t", col.names = FALSE)
rm(all_intersect)
#fold_change для начала
ggplot(common_peaks, aes(Cell_line, Fold_change))+
geom_boxplot()+
labs(title = "Common Peak distribution",
x = "Cell line",
y = "Fold change")+
theme_bw()
#Теперь q-value
ggplot(common_peaks, aes(Cell_line, common_peaks$`q-value`))+
geom_boxplot()+
labs(title = "Common Peak distribution",
x = "Cell line",
y = "Fold change")+
theme_bw()
annotation_v24 <- fread("/home/nickolay/R_stuff/NF-kB_sites/Annotation/Gencode_v24.bed")
#Теперь вытащим только транскрипты
transcripts <- subset(annotation_v24, annotation_v24$Type == "transcript")
transcripts$Type <- NULL
fwrite(transcripts, "transcripts.bed", sep = "\t", col.names = FALSE)
features <- fread("closest_transcripts.bed")
names(features) <- c("Chromosome", "peak_Start", "peak_Stop", "Peak_name",
"Fold_change", "p-value", "q-value", "Cell_line",
"Chr", "transcript_Start", "transcript_Stop", "Strand",
"Ensemble_ID", "distance")
features$Chr <- NULL
# Убрали пики, которые лежат очень далеко в пустоте, т.е. от них до гена более 3000 нуклеотидов
features <- subset(features, features$distance<3000 & features$distance > - 3000)
#Удалим хвостики у названий транскриптов
features$Ensemble_ID <- gsub("\\.\\d+", "", features$Ensemble_ID)
library(biomaRt)
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# query biomart
BM_out <- getBM(attributes = c("chromosome_name","ensembl_transcript_id",
"uniprotswissprot", "hgnc_symbol",
"transcript_biotype", "name_1006",
"namespace_1003"),
filters = "ensembl_transcript_id",
values = features$Ensemble_ID,
mart = mart,
uniqueRows = TRUE)
rm(mart)
#Удалим неинформативные GO
BM_out <- BM_out[BM_out$name_1006 != "molecular_function" &
BM_out$name_1006 != "cellular_component" &
BM_out$name_1006 != "biological_process" ,]
GO_data <- BM_out %>% group_by(namespace_1003, ensembl_transcript_id)
names(GO_data) <- c("Chromosome", "Ensemble_ID", "Uniprot_ID", "Gene_symbol", "Biotype",  "GO_name", "Namespace")
rm(BM_out)
#Сделаем маленький датасет со всем необходимым
features <- features[ , c("Ensemble_ID", "distance", "peak_Start", "peak_Stop","Cell_line", "Fold_change", "p-value", "q-value")]
final_peaks <- merge(GO_data, features)
fwrite(final_peaks, "final_peaks.txt")
rm(features, GO_data)
final_genes <- unique(final_peaks[final_peaks$Biotype == "protein_coding","Gene_symbol"])
write.csv(final_genes, file = "final_genes.csv", quote = F, row.names = F, col.names = F)
mf_table <- table(subset(final_peaks$GO_name, final_peaks$Namespace == "molecular_function"))
cc_table <- table(subset(final_peaks$GO_name, final_peaks$Namespace == "cellular_component"))
bp_table <- table(subset(final_peaks$GO_name, final_peaks$Namespace == "biological_process"))
head(sort(mf_table, decreasing = T))
head(sort(bp_table, decreasing = T))
head(sort(cc_table, decreasing = T))
rm(mf_table, cc_table, bp_table)
ggplot(final_peaks, aes(distance, ..count..))+
geom_density(aes(fill=Cell_line), alpha = 0.5) +
labs(title = "Peak position distribution",
x = "Position",
y = "Peak number")+
scale_x_continuous(breaks = seq(-3000, 3000, 500))+
theme_bw()
ggplot(final_peaks[final_peaks$distance!=0,], aes(distance, ..count..))+
geom_density(aes(fill=Cell_line), alpha = 0.5) +
labs(title = "Peak position distribution",
x = "Position",
y = "Peak number")+
scale_x_continuous(breaks = seq(-3000, 3000, 500))+
theme_bw()
#Для того, чтобы все получилось, нужно сделать правильную матричку
ncells <- length(unique(all_bins$Cell_line))
nbins <- max(all_bins[,.N, by=Cell_line]$N)
bins <- matrix(data=NA, nrow = ncells,
ncol = nbins,
dimnames =list(unique(all_bins$Cell_line)))
rm(nbins)
#Теперь мы ее заполним
for (i in unique(all_bins$Cell_line)){
length = length(all_bins[Cell_line == i, Peak_Bins])
bins[i, 1:length] <- all_bins[Cell_line == i, Peak_Bins]
}
#Теперь можно приступать к кластеризации
distance <- dist(bins, method = "euclidean") # distance matrix
fit <- hclust(distance, method="ward")
plot(fit) # display dendogram
rm(fit, distance, bins)
gc()
if (!file.exists("combinations.tsv")){
#Скрипт может отожрать очень много оперативы, поставим ограничение по памяти в 10гб
ulimit::memory_limit(10000)
#Сделаем лист с векторами, содержащими бины
#Имя каждого элемента - имя линии
bin_vecs <- list()
for (i in unique(all_bins$Cell_line)){
bin_vecs[[i]] <- all_bins[Cell_line == i, Peak_Bins]
}
#Сделали функцию, которая перебирает все сочетания клеточных линий, заменяет имена линий бинами, и сразу их пересекает
#На вход она берет количество линий и выдает вектор с количеством общих бинов
common_bin_number <- function(x){
temp <- combn(unique(all_bins$Cell_line), x,
FUN = function(x) bin_vecs[x],
simplify = F)
temp <- sapply(temp, function(x) length(Reduce(intersect, x)))
return(temp)
}
common_bin_number <- cmpfun(common_bin_number) # Ускорим эту функцию с помощью bytecode compilation
#Сделаем датафрейм с именами линий в сочетании в каждой ячейке
#Имя каждого столбца - количество линий в сочетании
comb_df <- matrix(data=NA,
nrow = choose(ncells, ncells %/% 2),
ncol = ncells,
dimnames = list(NULL, seq(from = 1, to = ncells)))
comb_df <- as.data.table(comb_df)
#Заполним датафрейм сочетаниями
#Лучше заменить for на foreach и распараллелить
for (i in 1:ncells){
comb_df[[i]][1:choose(ncells, i)] <- common_bin_number(as.numeric(i))
}
rm(i)
#Теперь переформуем в 2-столбчатый датасет
comb_df <- as.data.table(t(comb_df))
comb_df$Line_number <- c(1:ncells)
comb_df <- melt(comb_df, id="Line_number")
comb_df$Bin_numbers <- comb_df$value
comb_df$variable <- NULL
comb_df$value <- NULL
comb_df <- comb_df[!is.na(comb_df$Bin_numbers)]
#Запишем в файл
fwrite(comb_df, file = "combinations.tsv", sep = "\t")
rm(bin_vecs)
}else{
comb_df <- fread("combinations.tsv", "\t")
}
#Построим графичек
ggplot(comb_df, aes(x = Line_number, y = Bin_numbers))+
geom_jitter(alpha = 0.5, color = "red", size = 1.5, na.rm = T)+
#geom_smooth(method = "nls", formula = Bin_numbers ~ a+Line_number/b*Line_number,  se = FALSE, fullrange = TRUE)+
labs(title = "Common bin number",
x = "Number of lines",
y = "Common peak number")+
ylim(0, 2e+05)+
theme_bw()
comb_df[, mean(Bin_numbers), by = Line_number]
#Импортируем их как таблицу
reg_features <- fread("ENSEMBL_data/reg_features.txt")
miRNA_targets <- fread("ENSEMBL_data/miRNA_targets.txt")
other_regions <- fread("ENSEMBL_data/other_regions.txt")
TF_motifs <- fread("ENSEMBL_data/bind_motifs.txt")
reg_evidence <- fread("ENSEMBL_data/reg_evidence.txt") #Может быть битым
#Приведем все эти файлы к единому виду
names(reg_features) <- c("Chromosome", "Start", "Stop", "Feature")
reg_features$Score <- "."
reg_features <- reg_features[Chromosome %in% c(1:22, "X", "Y")]
names(TF_motifs) <- c("Binding_matrix","Chromosome", "Start", "Stop", "Score", "Feature")
TF_motifs <- TF_motifs[, c("Chromosome", "Start", "Stop", "Feature", "Binding_matrix", "Score")]
#Сольем 2 колонки Feature и Matrix через |
TF_motifs$Feature <- paste(TF_motifs$Feature, TF_motifs$Binding_matrix, sep = "|")
TF_motifs$Binding_matrix <- NULL
TF_motifs <- TF_motifs[Chromosome %in% c(1:22, "X", "Y")]
miRNA_targets$`Feature type class` <- NULL
names(miRNA_targets) <- c("Chromosome", "Start", "Stop", "Feature")
miRNA_targets$Score <- "."
miRNA_targets <- miRNA_targets[Chromosome %in% c(1:22, "X", "Y")]
names(other_regions) <- c("Chromosome", "Start", "Stop", "Class", "Feature")
other_regions$Class <- strsplit(other_regions$Class, " ")
other_regions$Class <- sapply(other_regions$Class, function(x) x[1])
other_regions[Feature == "Transcription Start Site", Feature := "TSS"]
other_regions$Feature <- paste(other_regions$Class, other_regions$Feature,  sep = " ")
other_regions$Score <- "."
other_regions <- other_regions[Chromosome %in% c(1:22, "X", "Y")]
other_regions$Class <- NULL
reg_evidence$`Feature type class` <- NULL
names(reg_evidence) <- c("Chromosome", "Start", "Stop", "Feature")
reg_evidence <- reg_evidence[Chromosome %in% c(1:22, "X", "Y")]
#Объединим все датасеты, кроме reg_evidence, с ним будем отдельно работать, если вообще будем
reg_features <- rbindlist(list(reg_features, miRNA_targets, TF_motifs, other_regions))
rm(miRNA_targets, TF_motifs, other_regions)
#Допишем имя хромосомы нормально
reg_features$Chromosome <- paste("chr", reg_features$Chromosome, sep = "")
#Проверяем на косячки
sum(reg_features$Start > reg_features$Stop) #Если 0, то все в порядке
#Записываем в файл
fwrite(reg_features, file = "reg_features.bed", sep = "\t", col.names = FALSE)
#rm(reg_features)
tmp <- common_bins[,.N, by=.(Peak_Bins, Cell_line)]
tmp <- tmp[,.N, by=N]
names(tmp) <- c("occurence", "number")
tmp
rm(tmp)
cell_line <- common_bins[,.N, by=Cell_line]
cell_line <- cell_line[N == min(N), Cell_line] #Выбрали линию, в которой минимальное число повторяющихся бинов
bins_for_bed <- common_bins[Cell_line == cell_line[1], .(Chromosome, Peak_Bins), by=Peak_name]
bins_for_bed <- bins_for_bed[ , .(Chromosome, Start = min(Peak_Bins),
Stop = max(Peak_Bins)+50), by=Peak_name]
bins_for_bed <- bins_for_bed[!duplicated(bins_for_bed), ]
bins_for_bed$Peak_name <- NULL
fwrite(bins_for_bed, file = "common_bins.bed", sep = "\t", col.names = FALSE)
rm(cell_line)
#Распределение по хромосомам
ggplot(bins_for_bed, aes(Chromosome, Stop-Start))+
geom_boxplot()+
theme_bw()+
labs(title = "Common regions length distribution",
x = "Chromosome",
y = "Region length")
#Распределение всех регионов по длинам. Красота же, видно все!
ggplot(bins_for_bed, aes(x=1 ,Stop-Start))+
geom_boxplot()+
theme_bw()+
labs(title = "Common regions length distribution",
y = "Region length")
#Распределение всех регионов по длинам. Красота же, видно все!
ggplot(bins_for_bed, aes(Stop-Start, ..count..))+
geom_histogram(fill ="red", alpha = 0.5)+
theme_bw()+
labs(title = "Common regions length distribution",
y = "Region length")
#Посмотрим на чиселки
table(bins_for_bed$Stop - bins_for_bed$Start)
#Видим, что размер этого элемента лежит в области от 150 до 250
barplot(table(bins_for_bed$Stop - bins_for_bed$Start))
closest_reg_features <- fread("closest_reg_features.bed", sep = "\t")
names(closest_reg_features) <- c("Chromosome", "peak_Start", "peak_Stop",
"Chr", "feature_Start", "feature_Stop",
"Feature_name", "Score", "distance")
closest_reg_features$Chr <- NULL
#Уберем все то, что лежит далеко, более чем в 300п.н. - если меньше, то спишем на погрешность
closest_reg_features <- subset(closest_reg_features, closest_reg_features$distance<300 & closest_reg_features$distance > - 300)
names(closest_reg_features)
#Сгруппируем по каждому общему участку связывания и посмотрим
summary_reg_features <- closest_reg_features[,.(V5 = list(Feature_name)), by = peak_Start]
#Выкинем дупликации из summary_reg_features
summary_reg_features$V5 <- sapply(summary_reg_features$V5, function(x) x[!duplicated(x)])
#Посмотрим по местоположению:
barplot(table(sapply(summary_reg_features$V5, function(x) x[1])))
pie(table(sapply(summary_reg_features$V5, function(x) x[1])))
#Видно, что эти куски лежат в промоторах и в promoter-flanking regions, а также есть немного в энхансерах
temp <- gsub("\\|.*", "", unlist(summary_reg_features$V5))
top_features <- as.data.table(table(temp))
names(top_features) <- c("Feature", "occurence")
top_features[order(-rank(occurence))]
#rm(summary_reg_features)
promoenhancers <- closest_reg_features[Feature_name %in% c("Enhancer", "FANTOM Enhancer", "VISTA Enhancer","Promoter", "Promoter Flanking Region")]
#Хм, в длине участков ничего не поменялось
ggplot(promoenhancers, aes(peak_Stop-peak_Start, ..count..))+
geom_histogram(fill ="red", alpha = 0.5)+
theme_bw()+
labs(title = "Common regions length distribution",
y = "Region length")
table(promoenhancers$peak_Stop - promoenhancers$peak_Start)
rm(promoenhancers)
promoters <- closest_reg_features[Feature_name %in% c("Promoter", "Promoter Flanking Region")]
#Хм, в длине участков ничего не поменялось
ggplot(promoters, aes(peak_Stop-peak_Start, ..count..))+
geom_histogram(fill ="red", alpha = 0.5)+
theme_bw()+
labs(title = "Common regions length distribution",
y = "Region length")
table(promoters$peak_Stop - promoters$peak_Start)
rm(promoters)
enhancers <- closest_reg_features[Feature_name %in% c("Enhancer", "FANTOM Enhancer", "VISTA Enhancer")]
#Хм, в длине участков ничего не поменялось
ggplot(enhancers, aes(peak_Stop-peak_Start, ..count..))+
geom_histogram(fill ="red", alpha = 0.5)+
theme_bw()+
labs(title = "Common regions length distribution",
y = "Region length")
table(enhancers$peak_Stop - enhancers$peak_Start)
rm(enhancers)
start_codons_v24 <- annotation_v24[annotation_v24$Type == "transcript"]
start_codons_v24$Type <- NULL
#Добавим по 10 нуклеотидов к старту, чтобы нормально съел bedtools
start_codons_v24$Stop <- start_codons_v24$Start + 10
#Проверяем на косячки
sum(start_codons_v24$Start > start_codons_v24$Stop) #Если 0, то все в порядке
#Запишем в файл
fwrite(start_codons_v24, file = "start_codons.bed", sep = "\t", col.names = FALSE)
closest_TSS <- fread("closest_start_codons.bed", sep = "\t")
names(closest_TSS) <- c("Chromosome", "peak_Start", "peak_Stop",
"Chr", "feature_Start", "feature_Stop",
"Strand", "Ensemble_ID", "distance")
closest_TSS$Chr <- NULL
#Удалим хвостики у названий транскриптов
closest_TSS$Ensemble_ID <- gsub("\\:\\d+", "", closest_TSS$Ensemble_ID)
#Уберем дупликаты
closest_TSS <- closest_TSS[!duplicated(closest_TSS)]
#Упорядочим нормально хромосомки, чтобы было красиво
closest_TSS$Chromosome <- factor(closest_TSS$Chromosome,
levels =c("chr1","chr2","chr3","chr4","chr5",
"chr6","chr7","chr8","chr9","chr10",
"chr11", "chr12", "chr13", "chr14", "chr15",
"chr16", "chr17", "chr18", "chr19", "chr20",
"chr21", "chr22", "chrX", "chrY"))
#Построим график, чтобы понимать распределение этих участков относительно TSS
ggplot(closest_TSS, aes(distance))+
geom_histogram(fill = "red", alpha = 0.5)+
labs(title = "Peak position distribution",
x = "Position",
y = "Peak number")+
theme_bw()
ggplot(closest_TSS, aes(Chromosome, distance))+
geom_boxplot()+
labs(title = "Peak position distribution",
x = "Position",
y = "Peak number")+
#scale_x_continuous(breaks = seq(-3000, 3000, 500))+
theme_bw()
# define biomart object
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# query biomart
seqs <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome)),
start=bins_for_bed$Start,
end=bins_for_bed$Stop,
type="entrezgene",
seqType="5utr",
mart=mart)
rm(mart)
View(seqs)
boxplot(length(seqs$`5utr`)
rm(mart)
boxplot(length(seqs$`5utr`))
seqs$`5utr`
length(seqs$`5utr`)
seqs <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome)),
start=bins_for_bed$Start,
end=bins_for_bed$Stop,
type="entrezgene",
seqType="exon_intr",
mart=mart)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
seqs <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome)),
start=bins_for_bed$Start,
end=bins_for_bed$Stop,
type="entrezgene",
seqType="exon_intr",
mart=mart)
seqs <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome)),
start=bins_for_bed$Start,
end=bins_for_bed$Stop,
type="entrezgene",
seqType="coding",
mart=mart)
getSequence
View(seqs)
getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome[1])),
start=bins_for_bed$Start[1],
end=bins_for_bed$Stop[1],
type="entrezgene",
seqType="coding",
mart=mart)
getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome[1])),
start=bins_for_bed$Start[1],
end=bins_for_bed$Stop[1],
type="entrezgene",
seqType="cdna",
mart=mart)
tmp <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome[1])),
start=bins_for_bed$Start[1],
end=bins_for_bed$Stop[1],
type="entrezgene",
seqType="cdna",
mart=mart)
View(tmp)
tmp <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome[1])),
start=bins_for_bed$Start[1],
end=bins_for_bed$Stop[1],
type="entrezgene",
seqType="gene_exon_intron",
mart=mart)
length(tmp$gene_exon_intron)
length(tmp$gene_exon_intron[1])
tmp$gene_exon_intron[1]
nchar(tmp$gene_exon_intron[1])
tmp <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome[1])),
start=bins_for_bed$Start[1],
end=bins_for_bed$Stop[1],
id="",
type="entrezgene",
seqType="gene_exon_intron",
mart=mart)
tmp <- getSequence(chromosome=as.numeric(sub("chr","", bins_for_bed$Chromosome[1])),
start=bins_for_bed$Start[1],
end=bins_for_bed$Stop[1],
type="entrezgene",
seqType="gene_exon_intron",
mart=mart)
nchar(tmp$gene_exon_intron[1]) == bins_for_bed$Stop[1] - bins_for_bed$Start[1]
nchar(tmp$gene_exon_intron[1])
bins_for_bed$Stop[1] - bins_for_bed$Start[1]
final_genes
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(compiler)
getwd()
setwd(dir = "~/R_stuff/ENCODE_NF-kB_peaks/")
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(compiler)
all_bins[Chromosome=="chr1", Peak_Bins, summary]
all_bins[Chromosome=="chr1", Peak_Bins, summary()]
all_bins[Chromosome=="chr1", Peak_Bins, ]
summary(all_bins[Chromosome=="chr1", Peak_Bins, ])
qqplot(all_bins[Chromosome=="chr1", Peak_Bins, ])
plot(all_bins[Chromosome=="chr1", Peak_Bins, ])
shapiro.test(all_bins[Chromosome=="chr1", Peak_Bins, ])
install.packages(c("MASS", "fitdistrplus"))
library(fitdistrplus)
fitdist(all_bins[Chromosome=="chr1", Peak_Bins, ], "norm")
plotdist(all_bins[Chromosome=="chr1", Peak_Bins,],"norm",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
f1 <- fitdist(all_bins[Chromosome=="chr1", Peak_Bins, ], "norm")
plotdist(all_bins[Chromosome=="chr1", Peak_Bins,],"norm",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
summary(f1)
plotdist(all_bins[Chromosome=="chr1", Peak_Bins,],"norm",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
norm
f1 <- fitdist(all_bins[Chromosome=="chr5", Peak_Bins, ], "norm")
plotdist(all_bins[Chromosome=="chr5", Peak_Bins,],"norm",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
f1 <- fitdist(all_bins[Cell_line =="HUVEC", Peak_Bins, ], "norm")
plotdist(all_bins[Chromosome=="HUVEC", Peak_Bins,],"norm",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
f1 <- fitdist(all_bins[Cell_line =="HUVEC", Peak_Bins, ], "norm")
plotdist(all_bins[Cell_line =="HUVEC", Peak_Bins,],"norm",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
f1 <- fitdist(all_bins[Cell_line =="IMR90", Peak_Bins, ], "norm")
plotdist(all_bins[Cell_line =="IMR90", Peak_Bins,],"norm",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
f1 <- fitdist(all_bins[Cell_line =="IMR90", Peak_Bins, ], "cauchy")
plotdist(all_bins[Cell_line =="IMR90", Peak_Bins,],"cauchy",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
f1 <- fitdist(all_bins[Cell_line =="IMR90", Peak_Bins, ], "logis")
plotdist(all_bins[Cell_line =="IMR90", Peak_Bins,],"logis",
para=list(mean=f1$estimate[1],sd=f1$estimate[2]))
